{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/tanmaytatyasosamjanawar/Desktop/Projects/Quiz-App/quiz-app/frontend/src/utils/constant.js"],"sourcesContent":["export const BASE_URL = \"http://localhost:8000\";\n"],"names":[],"mappings":";;;AAAO,MAAM,WAAW","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/tanmaytatyasosamjanawar/Desktop/Projects/Quiz-App/quiz-app/frontend/src/app/questions/%5Bid%5D/%5BuserId%5D/page.js"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { BASE_URL } from \"@/utils/constant\";\n// import { toast } from 'react-toastify';\n\nconst QuestionpageUser = () => {\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [questions, setQuestions] = useState([]);\n\n  const params = useParams();\n  const router = useRouter();\n  const quizId = params.id; // In Next.js, we use the [id] from the folder name\n  const userId = params.userId; // You might need to pass this as a query parameter or through state\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const res = await axios.get(BASE_URL + \"/allquestions/\" + quizId, {\n          withCredentials: true,\n        });\n\n        if (Array.isArray(res.data)) {\n          setQuestions(res.data);\n        } else {\n          console.error(\n            \"Invalid response format, expected an array:\",\n            res.data\n          );\n          setQuestions([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching questions:\", error);\n      }\n    };\n\n    fetchQuestions();\n  }, [quizId]);\n\n  const handleOptionSelect = (qId, optionText) => {\n    setSelectedAnswers((prev) => ({\n      ...prev,\n      [qId]: optionText,\n    }));\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const res = await axios.post(\n        BASE_URL + \"/submitquiz/\" + quizId + \"/\" + userId,\n        {\n          answers: selectedAnswers,\n        },\n        { withCredentials: true }\n      );\n\n      console.log(\"API Response:\", res.data);\n\n      if (res.data && res.data.score) {\n        // toast.success(`Quiz submitted! You scored ${res.data.score}`);\n        if (window.confirm(`Click OK to go to Dashboard.`)) {\n          router.push(\"/dashboard\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error submitting quiz:\", error);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container mx-auto p-4 m-6\">\n        <div className=\"flex justify-center\">\n          {questions?.length > 0 ? (\n            <h5 className=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-gray\">\n              Quiz Name- {questions[0].quizId.title}\n            </h5>\n          ) : (\n            \"No Title Available\"\n          )}\n        </div>\n        {Array.isArray(questions) && questions.length > 0 ? (\n          questions.map((question) => (\n            <div\n              key={question._id}\n              className=\"mb-6 p-4 border rounded-lg bg-gray-50\"\n            >\n              <h2 className=\"text-xl font-semibold text-gray-900\">\n                {question.questionText}\n              </h2>\n              {Array.isArray(question.options) &&\n                question.options.map((option, oIndex) => (\n                  <div\n                    key={oIndex}\n                    className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer ${\n                      selectedAnswers[question._id] === option.text\n                        ? \"bg-blue-300\"\n                        : \"bg-white\"\n                    }`}\n                    onClick={() =>\n                      handleOptionSelect(question._id, option.text)\n                    }\n                  >\n                    <span className=\"text-gray-900\">{option.text}</span>\n                    <input\n                      type=\"radio\"\n                      name={`question-${question._id}`}\n                      checked={selectedAnswers[question._id] === option.text}\n                      onChange={() =>\n                        handleOptionSelect(question._id, option.text)\n                      }\n                      className=\"ml-2\"\n                    />\n                  </div>\n                ))}\n            </div>\n          ))\n        ) : (\n          <p>No questions available. Add a new question!</p>\n        )}\n      </div>\n      <div className=\"flex justify-center\">\n        <button\n          type=\"button\"\n          onClick={handleSubmit}\n          className=\"text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\n        >\n          Submit\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default QuestionpageUser;\n"],"names":[],"mappings":"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","debugId":null}}]
}